import os
import pandas as pd
import numpy as np
import xgboost as xgb
import requests  
from flask import Flask, request, jsonify

app = Flask(__name__)
BACKEND_URL = "http://localhost:5000"

# üìå ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
ML_DIR = os.path.join(os.path.dirname(__file__), "../ML")

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
models = {
    "holland": xgb.Booster(),
    "big5": xgb.Booster()
}

try:
    models["holland"].load_model(os.path.join(ML_DIR, "xgb_model_holland.json"))
    models["big5"].load_model(os.path.join(ML_DIR, "xgb_model_big5.json"))
    print("‚úÖ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
except Exception as e:
    print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•: {e}")

# ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•
holland_features = ['R1', 'R2', 'R3', 'R4', 'R5', 'R6', 'R7', 'R8',
                    'I1', 'I2', 'I3', 'I4', 'I5', 'I6', 'I7', 'I8',
                    'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8',
                    'S1', 'S2', 'S3', 'S4', 'S5', 'S6', 'S7', 'S8',
                    'E1', 'E2', 'E3', 'E4', 'E5', 'E6', 'E7', 'E8',
                    'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8']

big5_features = ['EXT1', 'EXT2', 'EXT3', 'EXT4', 'EXT5', 'EXT7', 'EXT8',
                 'EST1', 'EST2', 'EST3', 'EST4', 'EST6', 'EST7',
                 'AGR1', 'AGR2', 'AGR3', 'AGR4', 'AGR6', 'AGR8', 'AGR10',
                 'CSN1', 'CSN2', 'CSN4', 'CSN6', 'CSN7', 'CSN8', 'CSN9', 'CSN10',
                 'OPN1', 'OPN2', 'OPN3', 'OPN7', 'OPN10']

@app.route("/", methods=["GET"])
def home():
    return jsonify({"message": "üöÄ Flask API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!", "routes": ["/predict"]})

@app.route("/predict", methods=["POST"])
def predict():
    try:
        data = request.json.get("answers", [])
        user_id = request.json.get("user_id")  # ‚úÖ ‡∏£‡∏±‡∏ö user_id ‡∏à‡∏≤‡∏Å frontend

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏°‡∏µ 81 ‡∏Ñ‡πà‡∏≤
        expected_features = len(holland_features) + len(big5_features)
        if len(data) != expected_features:
            return jsonify({
                "error": f"Feature shape mismatch, expected: {expected_features}, got {len(data)}"
            }), 400

        # ‚úÖ ‡πÅ‡∏¢‡∏Å‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•
        holland_data = data[:len(holland_features)]  # 48 ‡∏Ñ‡πà‡∏≤
        big5_data = data[len(holland_features):]  # 33 ‡∏Ñ‡πà‡∏≤

        # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame
        holland_df = pd.DataFrame([holland_data], columns=holland_features)
        big5_df = pd.DataFrame([big5_data], columns=big5_features)

        # ‚úÖ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡πÉ‡∏ä‡πâ argmax() ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ Probability ‚Üí ‡∏Å‡∏•‡∏∏‡πà‡∏°)
        holland_pred = int(np.argmax(models["holland"].predict(xgb.DMatrix(holland_df))))
        big5_pred = int(np.argmax(models["big5"].predict(xgb.DMatrix(big5_df))))

        print(f"üìå ‡∏Å‡∏•‡∏∏‡πà‡∏° Holland: {holland_pred}, ‡∏Å‡∏•‡∏∏‡πà‡∏° Big5: {big5_pred}")

        predictions = {
            "holland_group": holland_pred + 1,  # ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1 ‡πÅ‡∏ó‡∏ô 0
            "big5_group": big5_pred + 1  # ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1 ‡πÅ‡∏ó‡∏ô 0
        }

        # ‚úÖ ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏õ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô Backend
        try:
            response = requests.post(f"{BACKEND_URL}/results", json={
                "user_id": user_id,
                "holland_group": predictions["holland_group"],
                "big5_group": predictions["big5_group"]
            })

            if response.status_code != 200:
                print("‚ùå Failed to save prediction result:", response.json())
        except Exception as err:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà Backend:", err)

        return jsonify(predictions)

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    print("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô Flask API ‡∏ö‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï 5001...")
    app.run(debug=True, port=5001)